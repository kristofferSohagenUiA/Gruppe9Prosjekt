
del1_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078e  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e5  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b1  00000000  00000000  0000103f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000444  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000de  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001846  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z5delayi>:
#include <avr/io.h>
#include <util/delay.h>

void delay(int n)
{
	while(n--)
  80:	9c 01       	movw	r18, r24
  82:	21 50       	subi	r18, 0x01	; 1
  84:	31 09       	sbc	r19, r1
  86:	89 2b       	or	r24, r25
  88:	31 f0       	breq	.+12     	; 0x96 <_Z5delayi+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	8a 95       	dec	r24
  8e:	f1 f7       	brne	.-4      	; 0x8c <_Z5delayi+0xc>
  90:	00 00       	nop
  92:	c9 01       	movw	r24, r18
  94:	f5 cf       	rjmp	.-22     	; 0x80 <_Z5delayi>
  96:	08 95       	ret

00000098 <main>:



int main(void)
{
	DDRB = (1 << PB1); //Set pin PB1 as output
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	84 b9       	out	0x04, r24	; 4
	
	int cycleTime = 1000; //Define PWM period in us
	int dutyCycleTime = 0; //Set dutyCycle start value
	int i = 0;
  9c:	00 e0       	ldi	r16, 0x00	; 0
  9e:	10 e0       	ldi	r17, 0x00	; 0
int main(void)
{
	DDRB = (1 << PB1); //Set pin PB1 as output
	
	int cycleTime = 1000; //Define PWM period in us
	int dutyCycleTime = 0; //Set dutyCycle start value
  a0:	c0 e0       	ldi	r28, 0x00	; 0
  a2:	d0 e0       	ldi	r29, 0x00	; 0
	int i = 0;
	
	while (1)
	{
		PORTB |= (1 << PB1); //Set PB1 HIGH
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	85 b9       	out	0x05, r24	; 5
		delay(dutyCycleTime); //Wait
  aa:	ce 01       	movw	r24, r28
  ac:	0e 94 40 00 	call	0x80	; 0x80 <_Z5delayi>
		PORTB &= ~(1 << PB1); //Set PB1 LOW
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	85 b9       	out	0x05, r24	; 5
		delay(cycleTime - dutyCycleTime); //Wait remaining time
  b6:	88 ee       	ldi	r24, 0xE8	; 232
  b8:	93 e0       	ldi	r25, 0x03	; 3
  ba:	8c 1b       	sub	r24, r28
  bc:	9d 0b       	sbc	r25, r29
  be:	0e 94 40 00 	call	0x80	; 0x80 <_Z5delayi>
		
		if (i == 5)
  c2:	05 30       	cpi	r16, 0x05	; 5
  c4:	11 05       	cpc	r17, r1
  c6:	19 f4       	brne	.+6      	; 0xce <main+0x36>
		{
			i = 0;
			dutyCycleTime++;
  c8:	21 96       	adiw	r28, 0x01	; 1
		PORTB &= ~(1 << PB1); //Set PB1 LOW
		delay(cycleTime - dutyCycleTime); //Wait remaining time
		
		if (i == 5)
		{
			i = 0;
  ca:	00 e0       	ldi	r16, 0x00	; 0
  cc:	10 e0       	ldi	r17, 0x00	; 0
			dutyCycleTime++;
		}
		
		
		
		if(dutyCycleTime == cycleTime)
  ce:	c8 3e       	cpi	r28, 0xE8	; 232
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	d8 07       	cpc	r29, r24
  d4:	11 f4       	brne	.+4      	; 0xda <main+0x42>
		{
			dutyCycleTime = 0;
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	d0 e0       	ldi	r29, 0x00	; 0
		}  
		
		i++;
  da:	0f 5f       	subi	r16, 0xFF	; 255
  dc:	1f 4f       	sbci	r17, 0xFF	; 255
	
	int cycleTime = 1000; //Define PWM period in us
	int dutyCycleTime = 0; //Set dutyCycle start value
	int i = 0;
	
	while (1)
  de:	e2 cf       	rjmp	.-60     	; 0xa4 <main+0xc>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
